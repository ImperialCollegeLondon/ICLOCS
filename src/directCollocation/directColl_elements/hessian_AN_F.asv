function [ fzz ] = hessian_AN_F( df, Hf, fzz, M, n, nt, nz, f, X, U, P, t0, T, e, e2, DT, adjoint_f, vdat, data )
%UNTITLED2 Summary of this function goes here
%   Detailed explanation goes here

      idx=data.FD.index.f; 
      nfd=size(idx,2);
      Tj=kron(T,ones(1,n));

    persistent solsave; 
    if isfield(solsave,'ft') && (size(solsave.ft,1)~=nfd || size(solsave.ft,2)~=nfd)
        solsave = rmfield(solsave,'ft');
    end
    if isfield(solsave,'f') && (size(solsave.f.fp1_save,1)~=nfd || size(solsave.f.fp1_save,2)~=nfd)
        solsave = rmfield(solsave,'f');
    end

    if data.FD.FcnTypes.Ftype==3 && (data.ProblemTypes.FixedTime || (~data.ProblemTypes.FixedTime && ~data.FD.FcnTypes.FTRelation)) && data.ProblemTypes.FixedTime
            if ~isfield(solsave,'ft')
                ft_save=cell(nfd,nfd);
                val_indicator=[];
                hessian_AN_F_saveFixTime;
                solsave.ft=ft_save;
            end
            
            if isfield(data.options,'parfor') && data.options.parfor
                parfor i=1:size()
                   for j=1:i
                       if val_indicator(i,j)
                          ft=solsave.ft{i,j}.*adjoint_f;
                          fzz=fzz+sparse(idx(:,i),idx(:,j),reshape(ft',M*n,1),nz,nz);
                       end
                   end
                end  
            else
                for i=1:nfd
                   for j=1:i
                       if val_indicator(i,j)
                          ft=solsave.ft{i,j}.*adjoint_f;
                          fzz=fzz+sparse(idx(:,i),idx(:,j),reshape(ft',M*n,1),nz,nz);
                       end
                   end
                end  
            end
    else
        hessian_AN_F_nominal;
    end

    
    


end

